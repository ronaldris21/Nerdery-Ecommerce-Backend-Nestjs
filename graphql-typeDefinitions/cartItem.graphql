type CartItemPayload {
  # Database persisted fields
  userId: ID!
  productVariationId: ID!
  quantity: Int!

  # Calculated fields on the server
  unitPrice: Float!
  subTotal: Float!
  discount: Float!
  total: Float!

  # Resolved field via DataLoader
  productVariation: ProductVariation!
}

type CartPayload {
  items: [CartItemPayload!]!

  # Calculate fields on the server from all items in the cart
  subTotal: Float!
  discount: Float!
  total: Float!
}

input CartItemInput {
  productVariationId: ID!
  quantity: Int!
}

type Query {
  # Clients only
  cart: CartPayload!
}

type Mutation {
  # Clients only
  addCartItem(input: CartItemInput!): CartItemPayload!
  # Clients only
  updateCartItem(input: CartItemInput!): CartItemPayload!
  # Clients only
  deleteCartItem(productVariationId: ID!): GenericResponse!
}

type Subscription {
  # Clients only
  cartUpdated: CartPayload!
}
