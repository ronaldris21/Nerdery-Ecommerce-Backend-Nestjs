# PRODUCT DEFINITIONS
type Product {
  id: ID!
  name: String!
  gender: Gender!
  thumbnailUrl: String
  categoryId: ID!
  description: String
  isEnabled: Boolean!
  isDeleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!

  # Calculate values on likes, dislikes, productVariation (post, update, delete)
  likesCount: Int!
  minPrice: Float
  maxPrice: Float

  myLike: Boolean! # @ResolvedField if requested
  category: Category!
  productVariations: [ProductVariation!]! # @ResolvedField if requested - DataLoaders needed
}

type ProductPagination {
  collection: [Product!]!
  meta: PaginationMeta!
}

# INPUTS

input AddProductInput {
  name: String!
  gender: Gender!
  categoryId: ID!
  description: String!
  isEnabled: Boolean!
}

input UpdateProductInput {
  name: String
  gender: Gender
  categoryId: ID
  description: String
  isEnabled: Boolean
}

#Sorters for products
enum ProductSortableField {
  NAME
  CREATED_AT
  UPDATED_AT
  LIKES_COUNT
  PRICE #This property has to be manually implemented, because it is not a direct property of the Product entity
}

#Sorting
input SortingProductInput {
  field: ProductSortableField!
  order: SortOrder!
}

#Filters
input ProductFiltersInput {
  gender: Gender
  categoryId: ID
  search: String
  minPrice: Float
  maxPrice: Float
}

type Query {
  products(
    pagination: PaginationInput
    filter: ProductFiltersInput
    sortBy: SortingProductInput
  ): ProductPagination!

  # Clients only
  myLikedProducts(
    pagination: PaginationInput
    filters: ProductFiltersInput
    sortBy: SortingProductInput
  ): ProductPagination!

  product(id: ID!): Product!
}

type Mutation {
  # Managers only
  addProduct(input: AddProductInput!): Product!

  # Managers only
  updateProduct(id: ID!, input: UpdateProductInput!): Product!

  # Managers only
  deleteProduct(id: ID!): GenericResponse!
}
