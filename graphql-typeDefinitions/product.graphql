# PRODUCT DEFINITIONS
type Product {
  id: ID!
  name: String!
  gender: GenderEnum!
  thumbnailUrl: String
  categoryId: ID!
  description: String
  isEnabled: Boolean!
  isDeleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!

  # Calculate values on likes, dislikes, productVariation (post, update, delete)
  likesCount: Int!
  minPrice: Float
  maxPrice: Float

  myLike: Boolean! # @ResolvedField if requested
  category: Category!
  productVariations: [ProductVariation!]! # @ResolvedField if requested - DataLoaders needed 
}

type PaginationDetails {
  totalItems: Int!
  totalPages: Int!
  limit: Int!
  page: Int!
}

type ProductPagination {
  collection: [Product!]!
  meta: PaginationDetails!
}

# INPUTS

input AddProductInput {
  name: String!
  gender: GenderEnum!
  categoryId: ID!
  description: String!
  isEnabled: Boolean!
}

input UpdateProductInput {
  name: String
  gender: GenderEnum
  categoryId: ID
  description: String
  isEnabled: Boolean
}


input ProductFiltersInput {
  gender: GenderEnum
  categoryId: ID
  search: String
  minPrice: Float
  maxPrice: Float
}

# PAGINATION:
input PaginationInput {
  page: Int = 1
  limit: Int = 20
}

type Query {
  products(
    pagination: PaginationInput
    filter: ProductFiltersInput
    sortBy: SortingProductEnum
  ): ProductPagination!

  # Clients only
  myLikedProducts(
    pagination: PaginationInput
    filter: ProductFiltersInput
    sortBy: SortingProductEnum
  ): ProductPagination!

  product(id: ID!): Product!
}

type Mutation {
  # Managers only
  addProduct(input: AddProductInput!): Product!

  # Managers only
  updateProduct(id: ID!, input: UpdateProductInput!): Product!

  # Managers only
  deleteProduct(id: ID!): GenericResponse!
}
