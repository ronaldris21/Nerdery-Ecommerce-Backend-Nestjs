type Order {
  id: ID!
  userId: ID!
  currency: String!
  subTotal: Float!
  discount: Float!
  total: Float!
  status: OrderStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean!
  isStockReserved: Boolean!

  user: User!
  items: [OrderItem!]!
  payments: [StripePayment!]!
  incidents: [OrderIncident!]!
}

# Accesible for the client
enum OrderStatus {
  WAITING_PAYMENT
  CANCELED
  PAYMENT_APPROVED
  COMPLETED
}

type ApprovedStatusPayload {
  isApproved: Boolean!
}

type CreateOrderPayload {
  order: Order!
  stripePaymentId: String!
}

# QUERY FILTER INPUTS
input OrderFilterInput {
  status: OrderStatus
  afterDate: String
  beforeDate: String
}

type Query {

  //TODO: pagination may be needed here too! Managers are filled with tons of orders

  # Managers: Can retrieve all orders.
  # Clients: Can only access their own orders.
  orders(filter: OrderFilterInput): [Order!]!

  # Managers can access any order
  # Clients can only access their own order
  order(id: ID!): Order

  # Manager: Returns all payments
  # Client: Returns only the last payment info generated
  orderPayments(id: ID!): [StripePayment!]!

  # Check if payment was successfully approved from Stripe
  # Managers can access to any order && Clients can access their own orders
  orderPaymentApprovedStatus(id: ID!): ApprovedStatusPayload!
}

type Mutation {
  # Clients only
  # Transforms Cart-Items into an actual order and initiates payment.
  createOrder: CreateOrderPayload!

  # Clients only
  # Delete an order if payment is not completed
  # Clients can only delete their own order if not paid
  deleteOrder(id: ID!): GenericResponse!

  # Managers only
  # For example: from waiting_payment to payment_approved or completed
  updateOrderStatus(id: ID!, newStatus: OrderStatus!): Order!

  # Managers or Clients
  # Create another stripe_payment_id for an existing order (Clients or Managers)
  # If not enough stock, returns an error and reverts partial stock to cart.
  retryOrderPayment(id: ID!): CreateOrderPayload!
}
