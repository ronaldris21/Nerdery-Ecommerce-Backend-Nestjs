# ORDER STATUS ENUM
enum OrderStatus {
  waiting_payment
  payment_approved
  canceled
  completed
}

# ORDER DEFINITIONS
type Order {
  id: ID!
  userId: ID!
  user: User
  currency: String!
  subTotal: Float!
  discount: Float!
  total: Float!
  status: OrderStatus!
  createdAt: String!
  updatedAt: String!
  isDeleted: Boolean!
  isStockReserved: Boolean!
  items: [OrderItem!]
  payments: [StripePayment!]
  incidents: [OrderIncident!]
}

type ApprovedStatusPayload {
  isApproved: Boolean!
}

type CreateOrderPayload {
  order: Order!
  stripePaymentId: String!
}


# QUERY FILTER INPUTS
input OrderFilterInput {
  status: OrderStatus
  afterDate: String
  beforeDate: String
}

# QUERIES
type Query {
  # Get orders
  # Managers: Can retrieve all orders applying optional filters.
  # Clients: Can only access their own orders.
  orders(filter: OrderFilterInput): [Order!]

  # Get the order data and their items
  # Managers can access any order
  # Clients can only access their own order
  order(id: ID!): Order

  # Check all payment status from an order.
  # Manager: Returns all payments
  # Client: Returns only the last payment info generated
  orderPayments(id: ID!): [StripePayment!]

  # Check if payment was successfully approved from Stripe
  # Managers and Clients can access their own orders
  orderPaymentApprovedStatus(id: ID!): ApprovedStatusPayload!
}

# MUTATIONS
type Mutation {
  # Make an order (Clients only)
  # Transforms Cart-Items into an actual order and initiates payment.
  createOrder: CreateOrderPayload!


  # Replenishes failed orders stock back (Managers or via CRON JOB)
  cleanupOrders: Boolean!

  # Delete an order if payment is not completed
  # Clients can only delete their own order if not paid
  deleteOrder(id: ID!): Boolean!

  # Set the order status (Managers Only)
  # For example: from waiting_payment to payment_approved or completed
  updateOrderStatus(id: ID!, newStatus: OrderStatus!): Order!

  # Create another stripe_payment_id for an existing order (Clients or Managers)
  # If not enough stock, returns an error and reverts partial stock to cart.
  retryOrderPayment(id: ID!): CreateOrderPayload!
}
