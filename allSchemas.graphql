
# GENERIC FILE: _ENUMS.GENERIC.GRAPHQL


# ENUMS
enum Gender {
  MALE
  FEMALE
  UNISEX
  KIDS
}

# Create Generic Sort by property name
enum SortOrder {
  ASC
  DESC
}

enum DiscountType {
  PERCENTAGE # "%"
  DOLLAR_SIGN # "$"
}

# GENERIC FILE: _SCALARS.GENERIC.GRAPHQL


# npm i graphql-scalars
# https://the-guild.dev/graphql/scalars/docs/quick-start
scalar DateTime


# npm i  graphql-upload@14
# https://dev.to/elbarryamine/how-to-upload-files-with-nestjs-and-graphql-2iig
scalar Upload


# GENERIC FILE: _TYPES.GENERIC.GRAPHQL


# PAGINATION:
input PaginationInput {
  page: Int = 1
  limit: Int = 20
}
type PaginationMeta {
  totalItems: Int!
  totalPages: Int!
  limit: Int!
  page: Int!
}

# GENERIC SUCCESS RESPONSE
type successResponse {
  success: Boolean!
  message: String
  httpCode: Int!
}

# //TODO: give another check to send
# //TODO: Generic success and failed responses

type ValidationError {
  property: String!
  constraint: [String!]!
}

type GenericResponse {
  success: Boolean!
  message: String
  httpCode: Int!
  errors: [ValidationError!]
}


type CartItemPayload {
  # Database persisted fields
  userId: ID!
  productVariationId: ID!
  quantity: Int!

  # Calculated fields on the server
  unitPrice: Float!
  subTotal: Float!
  discount: Float!
  total: Float!

  # Resolved field via DataLoader
  productVariation: ProductVariation!
}

type CartPayload {
  items: [CartItemPayload!]!

  # Calculate fields on the server from all items in the cart
  subTotal: Float!
  discount: Float!
  total: Float!
}

input CartItemInput {
  productVariationId: ID!
  quantity: Int!
}

# CATEGORY DEFINITIONS
type Category {
  id: ID!
  name: String!
  parentCategoryId: ID

  parentCategory: Category
  subcategories: [Category]
}

type CategoryQuery {
  # If no name is provided, return all categories.
  categories(search: String): [Category!]!
}
# This mutation is for managing loose inventory items

# SERVICE: CLEANUP ORDERS
#   The app has service to replenish the stock of orders that have not been completed within a certain time frame.
#   If the payment is not confirmed, the stock is replenished. So new customers can buy the products.

# WHAT ORDER ARE ELIGIBLE FOR CLEANUP?
#   An order is considered eligible for cleanup if all the following conditions are met:
#     The payment is not confirmed (Order.paymentStatus = WAITING_PAYMENT| CANCELED)
#     and the order has been created for more than:
#         4 hours by default
#         X minutes from "cleanupOrders" Mutation
#     Order.isStockReserved = true

# SCHEDULE CLEANUP ORDERS
#   The service is called every 15 minutes by a CRON JOB to run the Cleanup Service, default minutes is 240 minutes (4 hours).

# MUTATION USAGE:
#   By default the applications holds an order's stock for 4 hours.
#   However, there are high availability cases where holding stock for 4 hours is too much.
#   For example, a manager can release the stock from eligible orders that have not been completed in 30 minutes.
#   This will allow other customers to buy the products.

# MUTATION RESTRICTIONS:
#   Only manager can use this mutation.
#   The minimum "minutes" accepted is 10.

type RestoreItem {
  productVariationId: ID!
  quantity: Int!

  productVariation: ProductVariation!
}

type RestoreStockPayload {
  OrderId: ID!
  items: [RestoreItem!]!
}

input CleanUpMutationInput {
  minutes: Int! # minimum 10 minutes
}

type CleanUpMutation {
  # Managers only
  # Replenishes the stock of eligible orders
  cleanupOrders(input: CleanUpMutationInput!): [RestoreStockPayload!]!
}
type Order {
  id: ID!
  userId: ID!
  currency: String!
  subTotal: Float!
  discount: Float!
  total: Float!
  status: OrderStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean!
  isStockReserved: Boolean!

  user: User!
  items: [OrderItem!]!
  payments: [StripePayment!]!
  incidents: [OrderIncident!]!
}

# Accesible for the client
enum OrderStatus {
  WAITING_PAYMENT
  CANCELED
  PAYMENT_APPROVED
  COMPLETED
}

type ApprovedStatusPayload {
  isApproved: Boolean!
}

type CreateOrderPayload {
  order: Order!
  stripePaymentId: String!
}

# QUERY FILTER INPUTS
input OrderFilterInput {
  status: OrderStatus
  afterDate: String
  beforeDate: String
}

# ORDER INCIDENT DEFINITIONS
type OrderIncident {
  id: ID!
  managerId: ID!
  clientId: ID!
  orderId: ID!
  withRestock: Boolean!
  withRefund: Boolean!
  refund: Float!
  reason: String!
  currency: String!
  totalPrice: Float!
  createdAt: DateTime!

  manager: User
  client: User
  order: Order
}

enum OrderIncidentSortableField {
  REFUND
  TOTAL_PRICE
  CREATED_AT
}

# Filters
# Filter overwriting rules:
# incidentId: This is the most specific filter. If you have an incidentId, you are looking for a specific incident, making other filters like userId and orderId redundant.
# orderId: This is less specific than incidentId but more specific than userId. If you have an orderId, you are looking for incidents related to a specific order, making the userId filter less relevant.
input OrderIncidentFiltersInput {
  clientId: ID
  managerId: ID
  orderId: ID #Order ID overrides userId filter
  incidentId: ID #Incident ID overrides userId and orderId filters
  reason: String
  currency: String
  minRefund: Float
  maxRefund: Float
  minTotalPrice: Float
  maxTotalPrice: Float
  withRestock: Boolean
  withRefund: Boolean
}

type OrderIncidentPagination {
  collection: [OrderIncident!]!
  meta: PaginationMeta!
}

input OrderIncidentSortingInput {
  field: OrderIncidentSortableField!
  order: SortOrder!
}

# INPUTS
input CreateOrderIncidentInput {
  orderId: ID!
  reason: String!
  withRestock: Boolean!
  withRefund: Boolean!
  refund: Float!
  currency: String!
}

# //TODO: This is going to be big! is it worth it to implement it using cursor based pagination?
# ORDER ITEM DEFINITIONS
type OrderItem {
  id: ID!
  orderId: ID!
  productVariationId: ID!
  unitPrice: Float!
  quantity: Int!
  subTotal: Float!
  discount: Float!
  total: Float!

  order: Order
  productVariation: ProductVariation
}

# No queries nor mutations needed
# Data is retrieve from the Order Queries, using ResolveFields with DataLoaders to request all data avoiding n+1 problem
# No types needed
# This data is used by services only
# No types needed
# This data is used by services only
# PRODUCT DEFINITIONS
type Product {
  id: ID!
  name: String!
  gender: Gender!
  thumbnailUrl: String
  categoryId: ID!
  description: String
  isEnabled: Boolean!
  isDeleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!

  # Calculate values on likes, dislikes, productVariation (post, update, delete)
  likesCount: Int!
  minPrice: Float
  maxPrice: Float

  myLike: Boolean! # @ResolvedField if requested
  category: Category!
  productVariations: [ProductVariation!]! # @ResolvedField if requested - DataLoaders needed
}

type ProductPagination {
  collection: [Product!]!
  meta: PaginationMeta!
}

# INPUTS

input AddProductInput {
  name: String!
  gender: Gender!
  categoryId: ID!
  description: String!
  isEnabled: Boolean!
}

input UpdateProductInput {
  name: String
  gender: Gender
  categoryId: ID
  description: String
  isEnabled: Boolean
}

#Sorters for products
enum ProductSortableField {
  NAME
  CREATED_AT
  UPDATED_AT
  LIKES_COUNT
  PRICE #This property has to be manually implemented, because it is not a direct property of the Product entity
}

#Sorting
input SortingProductInput {
  field: ProductSortableField!
  order: SortOrder!
}

#Filters
input ProductFiltersInput {
  gender: Gender
  categoryId: ID
  search: String
  minPrice: Float
  maxPrice: Float
}

# PRODUCT LIKE DEFINITIONS
type ProductLike {
  userId: ID!
  productId: ID!
  likedAt: DateTime!
}

type likesMutation {
  # Clients only
  likeProduct(productId: ID!): GenericResponse!

  # Clients only
  dislikeProduct(productId: ID!): GenericResponse!
}
# PRODUCT VARIATION DEFINITIONS
type ProductVariation {
  id: ID!
  price: Float!
  discount: Float
  discountType: DiscountType
  size: String!
  color: String!
  stock: Int!
  stockRefilledAt: String!
  isEnabled: Boolean!
  isDeleted: Boolean!

  product: Product! # Resolved field via DataLoader when parent is OrderItem or CartItem
  variationImages: [ProductVariationImage!]!
}

# INPUTS
input AddProductVariationInput {
  price: Float!
  discount: Float
  discountType: DiscountType
  size: String!
  color: String!
  stock: Int!
  isEnabled: Boolean!
}

input UpdateProductVariationInput {
  productId: ID
  price: Float
  discount: Float
  discountType: DiscountType
  size: String
  color: String
  stock: Int
  isEnabled: Boolean
}

# No types needed
# This data is used by services only
# No types needed
# This data is used by services only
# No types needed
# This data is used by services only
# STRIPE PAYMENTS DEFINITIONS
type StripePayment {
  id: ID!
  orderId: ID!
  amount: Float!
  currency: String!
  stripePaymentId: String!
  stripePaymentIntent: StripePaymentStatus!
  stripeWebhookData: String
  createdAt: DateTime!
  updatedAt: DateTime!

  order: Order
}

# STRIPE PAYMENTS ENUMS
enum StripePaymentStatus {
  REQUIRES_PAYMENT_METHOD
  REQUIRES_CONFIRMATION
  REQUIRES_ACTION
  PROCESSING
  SUCCEEDED
  REQUIRES_CAPTURE
  CANCELED
  FAILED
}
type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  createdAt: DateTime!
}

# PAYLOADS
type Me {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  roles: [String!]!
}

type AuthPayload {
  accessToken: String!
  refreshToken: String!
  exp: Int! # expiration time in seconds
  roles: [String!]!
}

# INPUTS
input SignUpInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input SignInInput {
  email: String!
  password: String!
}
input RefreshAndAccessTokenInput {
  refreshToken: String!
  accessToken: String!
}

input ResetPasswordInput {
  resetToken: String!
  newPassword: String!
}

# No types needed
# This data is used by services only
# scalar Upload
# https://aws.plainenglish.io/building-graphql-api-for-effortless-file-uploads-to-aws-s3-cf9ba8b5bd12

type ProductVariationImage {
  id: ID!
  url: String!
  productVariationId: ID!
}

# INPUTS
input UploadThumbnailInput {
  productId: ID!
  file: Upload!
}

input UploadProductVariationImagesInput {
  productVariationId: ID!
  files: [Upload!]!
}


# CONSOLIDATED QUERIES
type Query {

  # CARTITEM FILE QUERIES:
  # Clients only
  cart: CartPayload!

  # CATEGORY FILE QUERIES:

  # CLEANUPORDERS FILE QUERIES:

  # ORDER FILE QUERIES:

  //TODO: pagination may be needed here too! Managers are filled with tons of orders

  # Managers: Can retrieve all orders.
  # Clients: Can only access their own orders.
  orders(filter: OrderFilterInput): [Order!]!

  # Managers can access any order
  # Clients can only access their own order
  order(id: ID!): Order

  # Manager: Returns all payments
  # Client: Returns only the last payment info generated
  orderPayments(id: ID!): [StripePayment!]!

  # Check if payment was successfully approved from Stripe
  # Managers can access to any order && Clients can access their own orders
  orderPaymentApprovedStatus(id: ID!): ApprovedStatusPayload!

  # ORDERINCIDENT FILE QUERIES:
  # Managers only
  # If no parameters are provided, it returns all incidents
  orderIncidents(
    pagination: PaginationInput
    filters: OrderIncidentFiltersInput
    sortBy: OrderIncidentSortingInput
  ): [OrderIncident!]!

  # ORDERITEM FILE QUERIES:

  # PASSWORDRESET FILE QUERIES:

  # PERMISSION FILE QUERIES:

  # PRODUCT FILE QUERIES:
  products(
    pagination: PaginationInput
    filter: ProductFiltersInput
    sortBy: SortingProductInput
  ): ProductPagination!

  # Clients only
  myLikedProducts(
    pagination: PaginationInput
    filters: ProductFiltersInput
    sortBy: SortingProductInput
  ): ProductPagination!

  product(id: ID!): Product!

  # PRODUCTLIKE FILE QUERIES:

  # PRODUCTVARIATION FILE QUERIES:
  ProductVariations(productId: ID!): [ProductVariation!]!
  productVariation(id: ID!): ProductVariation

  # REFRESHTOKEN FILE QUERIES:

  # ROLE FILE QUERIES:

  # ROLEPERMISSION FILE QUERIES:

  # STRIPEPAYMENT FILE QUERIES:

  # USER FILE QUERIES:
  # Get logged user data
  me: Me

  # USERROLE FILE QUERIES:

  # VARIATIONIMAGE FILE QUERIES:
  productVariationImages(productId: ID!): [ProductVariationImage!]!
}

# CONSOLIDATED MUTATIONS
type Mutation {

  # CARTITEM FILE MUTATIONS:
  # Clients only
  addCartItem(input: CartItemInput!): CartItemPayload!
  # Clients only
  updateCartItem(input: CartItemInput!): CartItemPayload!
  # Clients only
  deleteCartItem(productVariationId: ID!): GenericResponse!

  # CATEGORY FILE MUTATIONS:

  # CLEANUPORDERS FILE MUTATIONS:

  # ORDER FILE MUTATIONS:
  # Clients only
  # Transforms Cart-Items into an actual order and initiates payment.
  createOrder: CreateOrderPayload!

  # Clients only
  # Delete an order if payment is not completed
  # Clients can only delete their own order if not paid
  deleteOrder(id: ID!): GenericResponse!

  # Managers only
  # For example: from waiting_payment to payment_approved or completed
  updateOrderStatus(id: ID!, newStatus: OrderStatus!): Order!

  # Managers or Clients
  # Create another stripe_payment_id for an existing order (Clients or Managers)
  # If not enough stock, returns an error and reverts partial stock to cart.
  retryOrderPayment(id: ID!): CreateOrderPayload!

  # ORDERINCIDENT FILE MUTATIONS:
  # Managers only
  # Creates an order incident and set the order as deleted
  createOrderIncident(input: CreateOrderIncidentInput!): OrderIncident!

  # ORDERITEM FILE MUTATIONS:

  # PASSWORDRESET FILE MUTATIONS:

  # PERMISSION FILE MUTATIONS:

  # PRODUCT FILE MUTATIONS:
  # Managers only
  addProduct(input: AddProductInput!): Product!

  # Managers only
  updateProduct(id: ID!, input: UpdateProductInput!): Product!

  # Managers only
  deleteProduct(id: ID!): GenericResponse!

  # PRODUCTLIKE FILE MUTATIONS:

  # PRODUCTVARIATION FILE MUTATIONS:
  # Managers only
  addProductVariation(
    productId: ID!
    input: AddProductVariationInput!
  ): ProductVariation!

  # Managers only
  updateProductVariation(
    id: ID!
    input: UpdateProductVariationInput!
  ): ProductVariation!

  # Managers only
  deleteProductVariation(id: ID!): GenericResponse!

  # REFRESHTOKEN FILE MUTATIONS:

  # ROLE FILE MUTATIONS:

  # ROLEPERMISSION FILE MUTATIONS:

  # STRIPEPAYMENT FILE MUTATIONS:

  # USER FILE MUTATIONS:
  signUp(input: SignUpInput!): GenericResponse!

  signIn(input: SignInInput!): AuthPayload!

  # Invalidate the provided refresh token from the database, and access token from the redis cache layer
  signOut(input: RefreshAndAccessTokenInput!): GenericResponse!

  # Sends a reset Token to the user's email if it exists
  forgotPassword(email: String!): GenericResponse!

  #  Use the reset Token from forgotPassword email and sets the new password for the user
  resetPassword(input: ResetPasswordInput!): AuthPayload!

  # Returns new tokens
  refreshToken(input: RefreshAndAccessTokenInput!): AuthPayload!

  # USERROLE FILE MUTATIONS:

  # VARIATIONIMAGE FILE MUTATIONS:
  # Managers only
  uploadProductThumbnail(input: UploadThumbnailInput!): Product!

  # Managers only
  uploadProductVariationImages(
    input: UploadProductVariationImagesInput!
  ): [ProductVariationImage!]!

  # Managers only
  deleteProductVariationImage(id: ID!): GenericResponse!
}
